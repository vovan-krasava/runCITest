getProject().setGroup("org.kolodieiev")
getProject().setVersion("1.0-SNAPSHOT")

apply plugin: "application"
apply plugin: "java-library"
//apply plugin: "java-library-distribution"

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    api group: 'org.testng', name: 'testng', version: '6.10', force: true

    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1', changing: true
    implementation group: 'org.json', name: 'json', version: '20180813', changing: true
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5', changing: true
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1', changing: true
}
mainClassName = "Main"

sourceSets {
    main {
        java { srcDir "src/main/java" }
        resources {
            srcDirs = [ new File ('src/main/resources') ]
            //include('**/*.json')
        }
    }
    test {
        java {
            srcDirs = ["src/test","suite"]
            include ('**/*.java')
        }

        resources {
            srcDirs = [ new File ('src/test/resources') ]
            include ('**/*.json')
        }
    }
}

jar {
    manifest {
        attributes 'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
                    'Main-Class': 'Main'
    }
}


//Common configuration to compile code
tasks.withType(JavaCompile) {
    options.debugOptions.debugLevel = 'lines,source,vars'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    options.encoding = 'UTF-8'
}

tasks.withType(GenerateModuleMetadata) { enabled = false }
tasks.withType(GenerateMavenPom) { enabled = true }
tasks.withType(Tar) { enabled = false }

task runTest(type:Test)  {
    description "Run test suite. Suite should be set to 'SUITE' env variable. "
    useTestNG() {
        //doFirst { suites suite(false) }
        preserveOrder true
        useDefaultListeners = true
        options.suites file('suite/all.xml')
    }
//    executeTests()
}

tasks.withType(Test) {
    if (!getLogger().isEnabled(LogLevel.WARN))
        onOutput { descriptor, event -> System.out.print(event.message ) }

    outputs.upToDateWhen { return false }

    setDefaultCharacterEncoding("UTF-8")

    ignoreFailures = true
    minHeapSize = "512m"
    maxHeapSize = "1200m"
}
