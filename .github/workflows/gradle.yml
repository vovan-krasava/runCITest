# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build

  run-test:
      name: func test
      needs: build
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Set up JDK 11
          uses: actions/setup-java@v3
          with:
            java-version: '11'
            distribution: 'temurin'
        - name: runTest with Gradle
          uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
          with:
            arguments: runTest
        - name: Test Summary
          uses: test-summary/action@v2
          with:
            paths: '**/build/reports/tests/runTest/**/TEST-*.xml'
            output: 'test-summary.md'
          if: always()
        - name: Upload test summary
          uses: actions/upload-artifact@v3
          with:
            name: test-summary.md
            path: test-summary.md
          if: always()
        - name: Create test summary
          uses: test-summary/action@dist
          with:
            paths: '**/build/reports/tests/runTest/**/TEST-*.xml'
          if: always()
  test:
    runs-on: ubuntu-18.04
    name: Generate Test Reports
    env:
      RESULTS_PATH: 'build/reports/tests/runTest/index.html'
    steps:
      - name: Generate Report
        id: xunit-viewer
        uses: AutoModality/action-xunit-viewer@v1
        with:
          results: ${{ env.RESULTS_PATH }}
      - name: The generated report
        run: echo "The report is ${{ steps.xunit-viewer.outputs.report-file }}"    
      - name: Attach the report
        uses: actions/upload-artifact@v1
        with:
          name: alternate-results-path-reports
          path: ${{ env.RESULTS_PATH }}




